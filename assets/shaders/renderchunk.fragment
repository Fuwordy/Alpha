#version 100

// Lightmap Customizer
// Modified shader by Jocopa3
// Original shader by Mojang Team at Microsoft

varying vec2 uv0;
varying vec2 uv1;
varying vec4 color;

#ifdef FOG
	varying vec4 fogColor;
#endif

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;

// Magic constant, Do not touch!
// Exact value is: (2 * sqrt(11030)) / 255
const mediump float maxDist = 0.8237161319602;

const lowp float h = 0.0625; // 1/16
const lowp float w = 0.03125; // 1/32
const lowp vec2 Y = vec2(0.0, 1.0); // Y vector

// Will return 0.0 during the day, and 1.0 at night, and changes proportionally during sunrise/sunset
float getLight() {
	vec3 col = texture2D( TEXTURE_1, Y ).rgb; // Yikes! Accessing textures at most 4 times per fragment!
	float d = distance(col, vec3(1.0)); // I may change this to distance squared if it hurts performance too much
	return d / maxDist; // Map the value of d to the range of 0.0 and 1.0
}

void main() {
	vec4 diffuse = texture2D( TEXTURE_0, uv0 );
	
	vec2 uv = vec2(uv1.x * w, (uv1.y * h) + 15.0 * h); // Get location of day-time lightmap on terrain texture
	vec4 light = texture2D( TEXTURE_0, uv ); // Get the modified lightmap
	
	// I really hate branching in shaders since it kills performance easily
	// But I don't know of an algorithmic way to do this either, so it'll have to stay
	if(light.a < 0.5) {
		light = texture2D( TEXTURE_1, uv0 ); // Use default lightmap
	} else {
		uv.x = (uv1.x * w) + w; // Get location of night-time lightmap on terrain texture
		light = mix(light, texture2D( TEXTURE_0, uv ), getLight()); // Use new lightmaps and blend them together
	}
	
	diffuse *= light;
	
#ifdef ALPHA_TEST
	if(diffuse.a < 0.5)
	 	discard;
#endif
	diffuse *= color;

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

	gl_FragColor = diffuse;
}